# Form implementation generated from reading ui file 'f:\learn-python\calculator\calculator.ui'
#
# Created by: PyQt6 UI code generator 6.8.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import math
from PyQt6.QtWidgets import QWidget , QApplication
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtGui import QIcon
from pathlib import Path


class Calculator(QWidget):
        def __init__(self):
              super().__init__()
              self.ui = Ui_Form()
              self.ui.setupUi(self)
              
              
              self.current_input="0"
              self.stored_value = None
              self.operation = None
              self.radian_mode = False
              self.last_ans =None
              
              
              self.ui.zeroBtn.clicked.connect(lambda: self.add_digit('0'))
              self.ui.oneBtn.clicked.connect(lambda:self.add_digit('1'))
              self.ui.twoBtn.clicked.connect(lambda:self.add_digit('2'))
              self.ui.threeBtn.clicked.connect(lambda:self.add_digit('3'))
              self.ui.fourBtn.clicked.connect(lambda:self.add_digit('4'))
              self.ui.fiveBtn.clicked.connect(lambda:self.add_digit('5'))
              self.ui.sixBtn.clicked.connect(lambda:self.add_digit('6'))
              self.ui.sevenBtn.clicked.connect(lambda:self.add_digit('7'))
              self.ui.eightBtn.clicked.connect(lambda:self.add_digit('8'))
              self.ui.nineBtn.clicked.connect(lambda:self.add_digit('9'))
              
              
              self.ui.plusBtn.clicked.connect(lambda:self.set_operation('+'))
              self.ui.minusBtn.clicked.connect(lambda:self.set_operation('-'))
              self.ui.multiplyBtn.clicked.connect(lambda:self.set_operation('*'))
              self.ui.divisionBtn.clicked.connect(lambda:self.set_operation('/'))
              self.ui.equalBtn.clicked.connect(self.calculate_result)
              
              
              self.ui.dotBtn.clicked.connect(self.add_decimal)
              self.ui.ACBtn.clicked.connect(self.clear_all)
              self.ui.DELBtn.clicked.connect(self.delete_last)
              self.ui.percentage.clicked.connect(self.percentage)
              self.ui.AnsBtn.clicked.connect(self.use_last_answer)
              
              self.ui.sin.clicked.connect(self.sin_func)
              self.ui.cos.clicked.connect(self.cos_func)
              self.ui.tan.clicked.connect(self.tan_func)
              self.ui.sine_inverse.clicked.connect(self.asin_func)
              self.ui.cos_inverse.clicked.connect(self.acos_func)
              self.ui.tan_inverse.clicked.connect(self.atan_func)
              self.ui.logarithm.clicked.connect(self.log10)
              self.ui.ln.clicked.connect(self.ln)
              self.ui.pi.clicked.connect(self.add_pi)
              self.ui.e_to_the_power_x.clicked.connect(self.exp)
              self.ui.x_square.clicked.connect(self.square)
              self.ui.sqRoot.clicked.connect(self.sqrt)
              self.ui.x_inverse_one.clicked.connect(self.reciprocal)
              self.ui.ten_to_the_power_x.clicked.connect(self.ten_power)
              self.ui.x_power_of_y.clicked.connect(lambda:self.set_operation('^'))
              self.ui.y_root_of_x.clicked.connect(self.y_root_x)
              self.ui.factorial.clicked.connect(self.factorial)
              
              
              self.ui.left_parenthesis.clicked.connect(lambda:self.add_to_expression('('))
              self.ui.right_parenthesis.clicked.connect(lambda:self.add_to_expression(')'))
              
              
              self.ui.decimal.clicked.connect(lambda:self.set_number_system("DEC"))
              self.ui.hexadeciamal.clicked.connect(lambda:self.set_number_system("HEX"))
              self.ui.binary.clicked.connect(lambda:self.set_number_system("BIN"))
              self.ui.octal.clicked.connect(lambda:self.set_number_system("OCT"))
              
              self.ui.degree.clicked.connect(lambda:self.set_angle_mode(False))
              self.ui.radians.clicked.connect(lambda:self.set_angle_mode(True))
              
              
              self.update_display()
        def add_digit(self, digit):
                if self.current_input == "0":
                        self.current_input=digit
                else:
                        self.current_input += digit
                self.update_display()
        
        def add_decimal(self):
                if '.' not in self.current_input:
                        self.current_input+='.'
                        self.update_display()

        def clear_all(self):
                self.current_input ="0"
                self.stored_value=None
                self.operation=None
                self.update_display()
        
        def delete_last(self):
                if len(self.current_input) > 1:
                        self.current_input= self.current_input[:-1]
                else:
                        self.current_input="0"
                self.update_display()
                
        
        def set_operation(self, op):
                if self.current_input and self.current_input != "Error":
                        if self.stored_value is None:
                                self.stored_value= float(self.current_input)
                        else:
                                self.calculate_result()
                        self.operation= op
                        self.current_input="0"
                        self.update_display()
        
        
        def calculate_result(self):
                if self.operation and self.stored_value is not None and self.current_input != "Error":
                        try:
                                second_value = float(self.current_input)
                                if self.operation == "+":
                                        result = self.stored_value + second_value
                                elif self.operation == "-":
                                        result = self.stored_value - second_value
                                elif self.operation == "*":
                                        result = self.stored_value * second_value
                                elif self.operation == "/":
                                        if second_value == 0:
                                                raise ZeroDivisionError
                                        result = self.stored_value / second_value
                                elif self.operation == "^":
                                        result = self.stored_value ** second_value
                                elif self.operation == "yroot":
                                        result = self.stored_value ** (1/second_value)
                                
                                self.last_ans = result
                                self.current_input=str(result)
                                self.stored_value= None
                                self.operation=None
                        except ZeroDivisionError:
                                self.current_input="Error"
                                self.stored_value=None
                                self.operation=None
                        except:
                                self.current_input="Error"
                                self.stored_value=None
                                self.operation=None
                        self.update_display()
                        
        
        def percentage(self):
                try:
                        value = float(self.current_input)
                        self.current_input= str(value/100)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()

        def use_last_answer(self):
                if self.last_ans is not None:
                        self.current_input = str(self.last_ans)
                        self.update_display()
        
        def add_to_expression(self, char):
                if self.current_input == "0":
                        self.current_input=char
                else:
                        self.current_input += char
                
                self.update_display()
        
        def sin_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.sin(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def cos_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.cos(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def tan_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.tan(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def asin_func(self):
                try:
                        value = float(self.current_input)
                        result = math.asin(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def acos_func(self):
                try:
                        value = float(self.current_input)
                        result = math.acos(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def atan_func(self):
                try:
                        value = float(self.current_input)
                        result = math.atan(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def log10(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.log10(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def ln(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.log(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def add_pi(self):
                self.current_input =str(math.pi)
                self.update_display()
        
        
        def exp(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.exp(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def square(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(value ** 2)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def sqrt(self):
                try:
                        value = float(self.current_input)
                        if value < 0:
                                raise ValueError
                        
                        self.current_input = str(math.sqrt(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                
        def reciprocal(self):
                try:
                        value = float(self.current_input)
                        if value == 0:
                                raise ValueError
                        
                        self.current_input = str(1 / value)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                
        def ten_power(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(10 ** value)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                        

        def y_root_x(self):
                if self.current_input and self.current_input != "Error":
                        if self.stored_value is None:
                                self.stored_value = float(self.current_input)
                                self.operation= 'yroot'
                                self.current_input="0"
                                self.update_display()
                                
        def factorial(self):
                try:
                        value =int(float(self.current_input))
                        if value < 0:
                                raise ValueError
                        self.current_input = str(math.factorial(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def set_number_system(self, system):
                try:
                        value =int(float(self.current_input))
                        if system == "HEX":
                                self.current_input = hex(value)
                        elif system == "BIN":
                                self.current_input = bin(value)
                        elif system == "OCT":
                                self.current_input = oct(value)
                        else:
                                self.current_input = str(value)
                        self.update_display()
                        
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def set_angle_mode(self, radian):
                self.radian_mode=radian
                if radian:
                        self.ui.radians.setChecked(True)
                else:
                        self.ui.degree.setChecked(True)

        
        def update_display(self):
                self.ui.lineEdit.setText(self.current_input)
                if self.operation:
                        self.ui.lineEdit_3.setText(f"{self.stored_value} {self.operation}")
                else:
                        self.ui.lineEdit_3.setText("")


class Calculator(QWidget):
        def __init__(self):
              super().__init__()
              self.ui = Ui_Form()
              self.ui.setupUi(self)
              
              
              self.current_input="0"
              self.stored_value = None
              self.operation = None
              self.radian_mode = False
              self.last_ans =None
              
              
              self.ui.zeroBtn.clicked.connect(lambda: self.add_digit('0'))
              self.ui.oneBtn.clicked.connect(lambda:self.add_digit('1'))
              self.ui.twoBtn.clicked.connect(lambda:self.add_digit('2'))
              self.ui.threeBtn.clicked.connect(lambda:self.add_digit('3'))
              self.ui.fourBtn.clicked.connect(lambda:self.add_digit('4'))
              self.ui.fiveBtn.clicked.connect(lambda:self.add_digit('5'))
              self.ui.sixBtn.clicked.connect(lambda:self.add_digit('6'))
              self.ui.sevenBtn.clicked.connect(lambda:self.add_digit('7'))
              self.ui.eightBtn.clicked.connect(lambda:self.add_digit('8'))
              self.ui.nineBtn.clicked.connect(lambda:self.add_digit('9'))
              
              
              self.ui.plusBtn.clicked.connect(lambda:self.set_operation('+'))
              self.ui.minusBtn.clicked.connect(lambda:self.set_operation('-'))
              self.ui.multiplyBtn.clicked.connect(lambda:self.set_operation('*'))
              self.ui.divisionBtn.clicked.connect(lambda:self.set_operation('/'))
              self.ui.equalBtn.clicked.connect(self.calculate_result)
              
              
              self.ui.dotBtn.clicked.connect(self.add_decimal)
              self.ui.ACBtn.clicked.connect(self.clear_all)
              self.ui.DELBtn.clicked.connect(self.delete_last)
              self.ui.percentage.clicked.connect(self.percentage)
              self.ui.AnsBtn.clicked.connect(self.use_last_answer)
              
              self.ui.sin.clicked.connect(self.sin_func)
              self.ui.cos.clicked.connect(self.cos_func)
              self.ui.tan.clicked.connect(self.tan_func)
              self.ui.sine_inverse.clicked.connect(self.asin_func)
              self.ui.cos_inverse.clicked.connect(self.acos_func)
              self.ui.tan_inverse.clicked.connect(self.atan_func)
              self.ui.logarithm.clicked.connect(self.log10)
              self.ui.ln.clicked.connect(self.ln)
              self.ui.pi.clicked.connect(self.add_pi)
              self.ui.e_to_the_power_x.clicked.connect(self.exp)
              self.ui.x_square.clicked.connect(self.square)
              self.ui.sqRoot.clicked.connect(self.sqrt)
              self.ui.x_inverse_one.clicked.connect(self.reciprocal)
              self.ui.ten_to_the_power_x.clicked.connect(self.ten_power)
              self.ui.x_power_of_y.clicked.connect(lambda:self.set_operation('^'))
              self.ui.y_root_of_x.clicked.connect(self.y_root_x)
              self.ui.factorial.clicked.connect(self.factorial)
              
              
              self.ui.left_parenthesis.clicked.connect(lambda:self.add_to_expression('('))
              self.ui.right_parenthesis.clicked.connect(lambda:self.add_to_expression(')'))
              
              
              self.ui.decimal.clicked.connect(lambda:self.set_number_system("DEC"))
              self.ui.hexadeciamal.clicked.connect(lambda:self.set_number_system("HEX"))
              self.ui.binary.clicked.connect(lambda:self.set_number_system("BIN"))
              self.ui.octal.clicked.connect(lambda:self.set_number_system("OCT"))
              
              self.ui.degree.clicked.connect(lambda:self.set_angle_mode(False))
              self.ui.radians.clicked.connect(lambda:self.set_angle_mode(True))
              
              
              self.update_display()
        def add_digit(self, digit):
                if self.current_input == "0":
                        self.current_input=digit
                else:
                        self.current_input += digit
                self.update_display()
        
        def add_decimal(self):
                if '.' not in self.current_input:
                        self.current_input+='.'
                        self.update_display()

        def clear_all(self):
                self.current_input ="0"
                self.stored_value=None
                self.operation=None
                self.update_display()
        
        def delete_last(self):
                if len(self.current_input) > 1:
                        self.current_input= self.current_input[:-1]
                else:
                        self.current_input="0"
                self.update_display()
                
        
        def set_operation(self, op):
                if self.current_input and self.current_input != "Error":
                        if self.stored_value is None:
                                self.stored_value= float(self.current_input)
                        else:
                                self.calculate_result()
                        self.operation= op
                        self.current_input="0"
                        self.update_display()
        
        
        def calculate_result(self):
                if self.operation and self.stored_value is not None and self.current_input != "Error":
                        try:
                                second_value = float(self.current_input)
                                if self.operation == "+":
                                        result = self.stored_value + second_value
                                elif self.operation == "-":
                                        result = self.stored_value - second_value
                                elif self.operation == "*":
                                        result = self.stored_value * second_value
                                elif self.operation == "/":
                                        if second_value == 0:
                                                raise ZeroDivisionError
                                        result = self.stored_value / second_value
                                elif self.operation == "^":
                                        result = self.stored_value ** second_value
                                elif self.operation == "yroot":
                                        result = self.stored_value ** (1/second_value)
                                
                                self.last_ans = result
                                self.current_input=str(result)
                                self.stored_value= None
                                self.operation=None
                        except ZeroDivisionError:
                                self.current_input="Error"
                                self.stored_value=None
                                self.operation=None
                        except:
                                self.current_input="Error"
                                self.stored_value=None
                                self.operation=None
                        self.update_display()
                        
        
        def percentage(self):
                try:
                        value = float(self.current_input)
                        self.current_input= str(value/100)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()

        def use_last_answer(self):
                if self.last_ans is not None:
                        self.current_input = str(self.last_ans)
                        self.update_display()
        
        def add_to_expression(self, char):
                if self.current_input == "0":
                        self.current_input=char
                else:
                        self.current_input += char
                
                self.update_display()
        
        def sin_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.sin(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def cos_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.cos(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def tan_func(self):
                try:
                        value = float(self.current_input)
                        if not self.radian_mode:
                                value= math.radians(value)
                        self.current_input = str(math.tan(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def asin_func(self):
                try:
                        value = float(self.current_input)
                        result = math.asin(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def acos_func(self):
                try:
                        value = float(self.current_input)
                        result = math.acos(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def atan_func(self):
                try:
                        value = float(self.current_input)
                        result = math.atan(value)
                        if not self.radian_mode:
                                result= math.degrees(value)
                        self.current_input = str(result)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def log10(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.log10(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def ln(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.log(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def add_pi(self):
                self.current_input =str(math.pi)
                self.update_display()
        
        
        def exp(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(math.exp(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def square(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(value ** 2)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def sqrt(self):
                try:
                        value = float(self.current_input)
                        if value < 0:
                                raise ValueError
                        
                        self.current_input = str(math.sqrt(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                
        def reciprocal(self):
                try:
                        value = float(self.current_input)
                        if value == 0:
                                raise ValueError
                        
                        self.current_input = str(1 / value)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                
        def ten_power(self):
                try:
                        value = float(self.current_input)
                        self.current_input = str(10 ** value)
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
                        

        def y_root_x(self):
                if self.current_input and self.current_input != "Error":
                        if self.stored_value is None:
                                self.stored_value = float(self.current_input)
                                self.operation= 'yroot'
                                self.current_input="0"
                                self.update_display()
                                
        def factorial(self):
                try:
                        value =int(float(self.current_input))
                        if value < 0:
                                raise ValueError
                        self.current_input = str(math.factorial(value))
                        self.update_display()
                except:
                        self.current_input="Error"
                        self.update_display()
        def set_number_system(self, system):
                try:
                        value =int(float(self.current_input))
                        if system == "HEX":
                                self.current_input = hex(value)
                        elif system == "BIN":
                                self.current_input = bin(value)
                        elif system == "OCT":
                                self.current_input = oct(value)
                        else:
                                self.current_input = str(value)
                        self.update_display()
                        
                except:
                        self.current_input="Error"
                        self.update_display()
        
        def set_angle_mode(self, radian):
                self.radian_mode=radian
                if radian:
                        self.ui.radians.setChecked(True)
                else:
                        self.ui.degree.setChecked(True)

        
        def update_display(self):
                self.ui.lineEdit.setText(self.current_input)
                if self.operation:
                        self.ui.lineEdit_3.setText(f"{self.stored_value} {self.operation}")
                else:
                        self.ui.lineEdit_3.setText("")


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(245, 477)
        Form.setStyleSheet("QWidget{\n"
"        background-color:black;\n"
"}")
        self.lineEdit = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit.setGeometry(QtCore.QRect(10, 40, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.lineEdit.setFont(font)
        self.lineEdit.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.lineEdit.setAutoFillBackground(False)
        self.lineEdit.setStyleSheet("QLineEdit {\n"
"    color: white;\n"
"    padding: 0px 5px;\n"
"}")
        self.lineEdit.setInputMask("")
        self.lineEdit.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.lineEdit.setDragEnabled(False)
        self.lineEdit.setReadOnly(True)
        self.lineEdit.setObjectName("lineEdit")
        self.layoutWidget = QtWidgets.QWidget(parent=Form)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 350, 231, 120))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.sevenBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.sevenBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.sevenBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.sevenBtn.setObjectName("sevenBtn")
        self.horizontalLayout.addWidget(self.sevenBtn)
        self.eightBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.eightBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.eightBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.eightBtn.setObjectName("eightBtn")
        self.horizontalLayout.addWidget(self.eightBtn)
        self.nineBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.nineBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.nineBtn.setStyleSheet("QPushButton{\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.nineBtn.setObjectName("nineBtn")
        self.horizontalLayout.addWidget(self.nineBtn)
        self.DELBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.DELBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.DELBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:blue;\n"
"color:white\n"
"}")
        self.DELBtn.setObjectName("DELBtn")
        self.horizontalLayout.addWidget(self.DELBtn)
        self.ACBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.ACBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.ACBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:blue;\n"
"color:white\n"
"}")
        self.ACBtn.setObjectName("ACBtn")
        self.horizontalLayout.addWidget(self.ACBtn)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.fourBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.fourBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.fourBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.fourBtn.setObjectName("fourBtn")
        self.horizontalLayout_2.addWidget(self.fourBtn)
        self.fiveBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.fiveBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.fiveBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.fiveBtn.setObjectName("fiveBtn")
        self.horizontalLayout_2.addWidget(self.fiveBtn)
        self.sixBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.sixBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.sixBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.sixBtn.setObjectName("sixBtn")
        self.horizontalLayout_2.addWidget(self.sixBtn)
        self.multiplyBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.multiplyBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.multiplyBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.multiplyBtn.setObjectName("multiplyBtn")
        self.horizontalLayout_2.addWidget(self.multiplyBtn)
        self.divisionBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.divisionBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.divisionBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.divisionBtn.setObjectName("divisionBtn")
        self.horizontalLayout_2.addWidget(self.divisionBtn)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.oneBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.oneBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.oneBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.oneBtn.setObjectName("oneBtn")
        self.horizontalLayout_3.addWidget(self.oneBtn)
        self.twoBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.twoBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.twoBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.twoBtn.setObjectName("twoBtn")
        self.horizontalLayout_3.addWidget(self.twoBtn)
        self.threeBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.threeBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.threeBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.threeBtn.setObjectName("threeBtn")
        self.horizontalLayout_3.addWidget(self.threeBtn)
        self.plusBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.plusBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.plusBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.plusBtn.setObjectName("plusBtn")
        self.horizontalLayout_3.addWidget(self.plusBtn)
        self.minusBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.minusBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.minusBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.minusBtn.setObjectName("minusBtn")
        self.horizontalLayout_3.addWidget(self.minusBtn)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.zeroBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.zeroBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.zeroBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.zeroBtn.setObjectName("zeroBtn")
        self.horizontalLayout_4.addWidget(self.zeroBtn)
        self.dotBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.dotBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.dotBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.dotBtn.setObjectName("dotBtn")
        self.horizontalLayout_4.addWidget(self.dotBtn)
        self.percentage = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.percentage.setMaximumSize(QtCore.QSize(41, 16777215))
        self.percentage.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.percentage.setObjectName("percentage")
        self.horizontalLayout_4.addWidget(self.percentage)
        self.AnsBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.AnsBtn.setMaximumSize(QtCore.QSize(31, 16777215))
        self.AnsBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.AnsBtn.setObjectName("AnsBtn")
        self.horizontalLayout_4.addWidget(self.AnsBtn)
        self.equalBtn = QtWidgets.QPushButton(parent=self.layoutWidget)
        self.equalBtn.setMaximumSize(QtCore.QSize(41, 16777215))
        self.equalBtn.setStyleSheet("QPushButton{\n"
"\n"
"background-color:white;\n"
"color:black\n"
"}")
        self.equalBtn.setObjectName("equalBtn")
        self.horizontalLayout_4.addWidget(self.equalBtn)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_2.setGeometry(QtCore.QRect(10, 0, 121, 31))
        font = QtGui.QFont()
        font.setFamily("NSimSun")
        font.setPointSize(14)
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setAutoFillBackground(False)
        self.lineEdit_2.setStyleSheet("QLineEdit{\n"
"color:white;\n"
"border:none\n"
"}")
        self.lineEdit_2.setReadOnly(True)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(parent=Form)
        self.lineEdit_3.setGeometry(QtCore.QRect(140, 10, 101, 21))
        self.lineEdit_3.setStyleSheet("QLineEdit {\n"
"    background-color: qlineargradient(\n"
"        x1:0, y1:0, x2:1, y2:1,\n"
"        stop:0 #0d1b2a,\n"
"        stop:0.5 #183b5a,\n"
"        stop:1 #264b6d\n"
"    );\n"
"    border: 1px solid #0a1929;\n"
"    border-radius: 4px;\n"
"    padding: 4px;\n"
"}\n"
"")
        self.lineEdit_3.setReadOnly(True)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setGeometry(QtCore.QRect(10, 100, 235, 241))
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.degree = QtWidgets.QRadioButton(parent=self.widget)
        self.degree.setStyleSheet("QRadioButton{\n"
"background-color:gray;\n"
"color:white;\n"
"\n"
"\n"
"}")
        self.degree.setObjectName("degree")
        self.horizontalLayout_5.addWidget(self.degree)
        self.radians = QtWidgets.QRadioButton(parent=self.widget)
        self.radians.setStyleSheet("QRadioButton{\n"
"background-color:gray;\n"
"color:white;\n"
"\n"
"\n"
"}")
        self.radians.setObjectName("radians")
        self.horizontalLayout_5.addWidget(self.radians)
        self.left_parenthesis = QtWidgets.QPushButton(parent=self.widget)
        self.left_parenthesis.setMaximumSize(QtCore.QSize(41, 16777215))
        self.left_parenthesis.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.left_parenthesis.setObjectName("left_parenthesis")
        self.horizontalLayout_5.addWidget(self.left_parenthesis)
        self.right_parenthesis = QtWidgets.QPushButton(parent=self.widget)
        self.right_parenthesis.setMaximumSize(QtCore.QSize(41, 16777215))
        self.right_parenthesis.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.right_parenthesis.setObjectName("right_parenthesis")
        self.horizontalLayout_5.addWidget(self.right_parenthesis)
        self.pi = QtWidgets.QPushButton(parent=self.widget)
        self.pi.setMaximumSize(QtCore.QSize(41, 16777215))
        self.pi.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.pi.setObjectName("pi")
        self.horizontalLayout_5.addWidget(self.pi)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.sin = QtWidgets.QPushButton(parent=self.widget)
        self.sin.setMaximumSize(QtCore.QSize(41, 16777215))
        self.sin.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.sin.setObjectName("sin")
        self.horizontalLayout_6.addWidget(self.sin)
        self.cos = QtWidgets.QPushButton(parent=self.widget)
        self.cos.setMaximumSize(QtCore.QSize(41, 16777215))
        self.cos.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.cos.setObjectName("cos")
        self.horizontalLayout_6.addWidget(self.cos)
        self.tan = QtWidgets.QPushButton(parent=self.widget)
        self.tan.setMaximumSize(QtCore.QSize(41, 16777215))
        self.tan.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.tan.setObjectName("tan")
        self.horizontalLayout_6.addWidget(self.tan)
        self.logarithm = QtWidgets.QPushButton(parent=self.widget)
        self.logarithm.setMaximumSize(QtCore.QSize(41, 16777215))
        self.logarithm.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.logarithm.setObjectName("logarithm")
        self.horizontalLayout_6.addWidget(self.logarithm)
        self.ln = QtWidgets.QPushButton(parent=self.widget)
        self.ln.setMaximumSize(QtCore.QSize(41, 16777215))
        self.ln.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.ln.setObjectName("ln")
        self.horizontalLayout_6.addWidget(self.ln)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.sine_inverse = QtWidgets.QPushButton(parent=self.widget)
        self.sine_inverse.setMaximumSize(QtCore.QSize(41, 16777215))
        self.sine_inverse.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.sine_inverse.setObjectName("sine_inverse")
        self.horizontalLayout_7.addWidget(self.sine_inverse)
        self.cos_inverse = QtWidgets.QPushButton(parent=self.widget)
        self.cos_inverse.setMaximumSize(QtCore.QSize(41, 16777215))
        self.cos_inverse.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.cos_inverse.setObjectName("cos_inverse")
        self.horizontalLayout_7.addWidget(self.cos_inverse)
        self.tan_inverse = QtWidgets.QPushButton(parent=self.widget)
        self.tan_inverse.setMaximumSize(QtCore.QSize(41, 16777215))
        self.tan_inverse.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.tan_inverse.setObjectName("tan_inverse")
        self.horizontalLayout_7.addWidget(self.tan_inverse)
        self.e_to_the_power_x = QtWidgets.QPushButton(parent=self.widget)
        self.e_to_the_power_x.setMaximumSize(QtCore.QSize(41, 16777215))
        self.e_to_the_power_x.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.e_to_the_power_x.setObjectName("e_to_the_power_x")
        self.horizontalLayout_7.addWidget(self.e_to_the_power_x)
        self.x_inverse_one = QtWidgets.QPushButton(parent=self.widget)
        self.x_inverse_one.setMaximumSize(QtCore.QSize(41, 16777215))
        self.x_inverse_one.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.x_inverse_one.setObjectName("x_inverse_one")
        self.horizontalLayout_7.addWidget(self.x_inverse_one)
        self.verticalLayout_2.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.x_square = QtWidgets.QPushButton(parent=self.widget)
        self.x_square.setMaximumSize(QtCore.QSize(41, 16777215))
        self.x_square.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.x_square.setObjectName("x_square")
        self.horizontalLayout_8.addWidget(self.x_square)
        self.ten_to_the_power_x = QtWidgets.QPushButton(parent=self.widget)
        self.ten_to_the_power_x.setMaximumSize(QtCore.QSize(41, 16777215))
        self.ten_to_the_power_x.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.ten_to_the_power_x.setObjectName("ten_to_the_power_x")
        self.horizontalLayout_8.addWidget(self.ten_to_the_power_x)
        self.y_root_of_x = QtWidgets.QPushButton(parent=self.widget)
        self.y_root_of_x.setMaximumSize(QtCore.QSize(41, 16777215))
        self.y_root_of_x.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.y_root_of_x.setObjectName("y_root_of_x")
        self.horizontalLayout_8.addWidget(self.y_root_of_x)
        self.x_power_of_y = QtWidgets.QPushButton(parent=self.widget)
        self.x_power_of_y.setMaximumSize(QtCore.QSize(41, 16777215))
        self.x_power_of_y.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.x_power_of_y.setObjectName("x_power_of_y")
        self.horizontalLayout_8.addWidget(self.x_power_of_y)
        self.sqRoot = QtWidgets.QPushButton(parent=self.widget)
        self.sqRoot.setMaximumSize(QtCore.QSize(41, 16777215))
        self.sqRoot.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.sqRoot.setObjectName("sqRoot")
        self.horizontalLayout_8.addWidget(self.sqRoot)
        self.verticalLayout_2.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.decimal = QtWidgets.QPushButton(parent=self.widget)
        self.decimal.setMaximumSize(QtCore.QSize(41, 16777215))
        self.decimal.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.decimal.setObjectName("decimal")
        self.horizontalLayout_9.addWidget(self.decimal)
        self.hexadeciamal = QtWidgets.QPushButton(parent=self.widget)
        self.hexadeciamal.setMaximumSize(QtCore.QSize(41, 16777215))
        self.hexadeciamal.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.hexadeciamal.setObjectName("hexadeciamal")
        self.horizontalLayout_9.addWidget(self.hexadeciamal)
        self.binary = QtWidgets.QPushButton(parent=self.widget)
        self.binary.setMaximumSize(QtCore.QSize(41, 16777215))
        self.binary.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.binary.setObjectName("binary")
        self.horizontalLayout_9.addWidget(self.binary)
        self.octal = QtWidgets.QPushButton(parent=self.widget)
        self.octal.setMaximumSize(QtCore.QSize(41, 16777215))
        self.octal.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.octal.setObjectName("octal")
        self.horizontalLayout_9.addWidget(self.octal)
        self.factorial = QtWidgets.QPushButton(parent=self.widget)
        self.factorial.setMaximumSize(QtCore.QSize(41, 16777215))
        self.factorial.setStyleSheet("QPushButton{\n"
"\n"
"background-color:gray;\n"
"color:white\n"
"}")
        self.factorial.setObjectName("factorial")
        self.horizontalLayout_9.addWidget(self.factorial)
        self.verticalLayout_2.addLayout(self.horizontalLayout_9)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Calculator"))
        parentLoc = Path(__file__).parent
        Form.setWindowIcon(QIcon(f'{parentLoc}/calculator.png'))
        self.lineEdit.setText(_translate("Form", "0"))
        self.sevenBtn.setText(_translate("Form", "7"))
        self.eightBtn.setText(_translate("Form", "8"))
        self.nineBtn.setText(_translate("Form", "9"))
        self.DELBtn.setText(_translate("Form", "DEL"))
        self.ACBtn.setText(_translate("Form", "AC"))
        self.fourBtn.setText(_translate("Form", "4"))
        self.fiveBtn.setText(_translate("Form", "5"))
        self.sixBtn.setText(_translate("Form", "6"))
        self.multiplyBtn.setText(_translate("Form", "X"))
        self.divisionBtn.setText(_translate("Form", "/"))
        self.oneBtn.setText(_translate("Form", "1"))
        self.twoBtn.setText(_translate("Form", "2"))
        self.threeBtn.setText(_translate("Form", "3"))
        self.plusBtn.setText(_translate("Form", "+"))
        self.minusBtn.setText(_translate("Form", "-"))
        self.zeroBtn.setText(_translate("Form", "0"))
        self.dotBtn.setText(_translate("Form", "."))
        self.percentage.setText(_translate("Form", "%"))
        self.AnsBtn.setText(_translate("Form", "Ans"))
        self.equalBtn.setText(_translate("Form", "="))
        self.lineEdit_2.setText(_translate("Form", "CASIO"))
        self.degree.setText(_translate("Form", "Deg"))
        self.radians.setText(_translate("Form", "Rad"))
        self.left_parenthesis.setText(_translate("Form", "("))
        self.right_parenthesis.setText(_translate("Form", ")"))
        self.pi.setText(_translate("Form", "π"))
        self.sin.setText(_translate("Form", "sin"))
        self.cos.setText(_translate("Form", "cos"))
        self.tan.setText(_translate("Form", "tan"))
        self.logarithm.setText(_translate("Form", "log"))
        self.ln.setText(_translate("Form", "ln"))
        self.sine_inverse.setText(_translate("Form", "sin⁻¹"))
        self.cos_inverse.setText(_translate("Form", "cos⁻¹"))
        self.tan_inverse.setText(_translate("Form", "tan⁻¹"))
        self.e_to_the_power_x.setText(_translate("Form", "e^x"))
        self.x_inverse_one.setText(_translate("Form", "x⁻¹"))
        self.x_square.setText(_translate("Form", "x^2"))
        self.ten_to_the_power_x.setText(_translate("Form", "10^x"))
        self.y_root_of_x.setText(_translate("Form", "y√ x"))
        self.x_power_of_y.setText(_translate("Form", "x^y"))
        self.sqRoot.setText(_translate("Form", "√ "))
        self.decimal.setText(_translate("Form", "DEC"))
        self.hexadeciamal.setText(_translate("Form", "HEX"))
        self.binary.setText(_translate("Form", "BIN"))
        self.octal.setText(_translate("Form", "OCT"))
        self.factorial.setText(_translate("Form", "x!"))



if __name__ == "__main__":
        
        app = QApplication(sys.argv)
        # Form = QWidget()
        # ui = Ui_Form()
        # ui.setupUi(Form)
        # Form.show()
        calculator = Calculator()
        calculator.show()
        sys.exit(app.exec())